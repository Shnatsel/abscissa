//! Error types

use abscissa::{err, Error};
use failure::Fail;
use std::{fmt, io};

/// Error type
#[derive(Debug)]
pub struct {{error_type}}(Error<{{error_kind_type}}>);

/// Kinds of errors
#[derive(Copy, Clone, Eq, PartialEq, Debug, Fail)]
pub enum {{error_kind_type}} {
    /// Error in configuration file
    #[fail(display = "config error")]
    Config,

    /// Input/output error
    #[fail(display = "I/O error")]
    Io,
}

impl fmt::Display for {{error_type}} {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        self.0.fmt(f)
    }
}

impl From<Error<{{error_kind_type}}>> for {{error_type}} {
    fn from(other: Error<{{error_kind_type}}>) -> Self {
        {{error_type}}(other)
    }
}

impl From<io::Error> for {{error_type}} {
    fn from(other: io::Error) -> Self {
        err!({{error_kind_type}}::Io, other).into()
    }
}
